<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="empSelect"><!-- namespace를 사용하는 것을 권장한다. -->

<!-- 검색된 컬럼명과 자바 property매칭하기 -->
<resultMap type="employees" id="empSelectMap">
	<id column="employee_id" property="employeeId"/>	<!-- 보통 primary key를 id로 둔다. -->
<result column="last_name" property="lastName"/>
	<result column="email" property="email"/>
	<result column="hire_date" property="hireDate"/>
	<result column="job_id" property="jobId"/>
	<result column="salary" property="salary"/>
</resultMap>


<!-- 자주 사용되는 반복코드를 sql로 만들어 놓고 include하여 사용한다. -->
<sql id="empSql">
	select employee_id , last_name , email, hire_date , job_id , salary from employees
</sql>

<!-- 컬럼명 별칭으로 자바객체에 바인딩 시키기 -->
<!-- 	<select id="selectAll" resultType="employees"> -->
<!-- 		select employee_id employeeId, last_name lastName, email, hire_date hireDate, job_id jobId, salary from employees -->
<!-- 	</select> -->


	<select id="selectAll" resultType="employees">
		<include refid="empSql"/>
	</select>
	
	<select id="selectByEmpId" resultType="employees" parameterType="int">
		<include refid="empSql"/>
		where employee_id=#{_parameter}
	</select>
	
	<!-- 정렬대상으로 전달받아 정렬하기 -->
	<select id="selectByOrder" parameterType="String" resultType="employees">
		<include refid="empSql"/>
		Order By #{_parameter}
	</select>
	
	<!-- salary를 인수로 전달 받아 salary보다 적게 받는 사원의 정보 검색 -->
	<select id="selectWhereSalary" parameterType="int" resultType="employees">
		<include refid="empSql"/>
		where salary &lt;= #{_parameter}
		order by salary desc
	</select>
	
	<!-- 범위 지정해서 검색하기(인자 2개 이상) -->
	<select id="selectByMinMax" parameterType="map" resultType="employees">
		<include refid="empSql"/>
		where salary between #{min} and #{max}
		order by salary
	</select>
</mapper>